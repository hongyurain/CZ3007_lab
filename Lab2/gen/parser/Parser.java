package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short VOID = 10;
		static public final short BOOLEAN = 11;
		static public final short INT = 12;
		static public final short LCURLY = 13;
		static public final short SEMICOLON = 14;
		static public final short RCURLY = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short EQL = 21;
		static public final short COMMA = 22;
		static public final short PLUS = 23;
		static public final short TIMES = 24;
		static public final short DIV = 25;
		static public final short MOD = 26;
		static public final short TYPE = 27;
		static public final short MODULE = 28;
		static public final short IMPORT = 29;
		static public final short PUBLIC = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9p5Lbbq54KKlTqpIHn89W5ZWWO18oGaOmW826OX8Gc4G51KL1Gtn0rnGS4T1HKDBXo##9D" +
		"FFrnGK1H156LrGJOtG4KH4HL1G0G2mlDsTKtRwPvc4W$ds7DklwLklNfJLVsg03CVer66HW" +
		"p5A5JYR0p4XUYAkt0Fpa0kEk5Cd8KyTCRfhUJbj99tRY2lg0KlY7LUgrXzMh2cu79SZpgCn" +
		"JMu5jV1n0Du40yX7scoHLv63vJWVFJpyMOwl11vEmDvZpYyi6n1IX1FZZky39LbKBoemxi4" +
		"b#AoG5x709vxLWhLhBWzfSepp1DhDEeLOp3wjs1VuEjVuVCCztakydckydbkE6aUer25Pt5" +
		"$Wd6yFPBPjoPbfE8PtEBpteO9k1qJSGVkRFEOoUn7rVfNCxTq#GFtuKPCGmSCmcbu716qGt" +
		"jawRMTXcpczZ1gxNcHd#9#sOedCKJFrXZShFrsv4mqCEOON84k62$xSJUwOIgUa7sub#DDn" +
		"paeG7VqH0p5w8M#w8ro360#DHX9ZCC8N8mhvJKyXflaTKp2PAx4rPY1fz64v$0yxESfHYba" +
		"b296YV7BB66iKiRgmrtOb$kmFtVF0BLc$m$lLB8CLeqGmlowKv76TUgiLYcTNt8cVurSlOw" +
		"ibTa#NXU7Pv0N2UJbE3mhOcqW3mxFpZA8PpWykmu6yJ82UFvPyNkyiVvbH5lL$rHvWlE8yL" +
		"J8QaMFP7OuAQEEtsAkpzkDNre#pxpkhCrj7JEPRQz$6JrLkitW$gfXDQXWlMbWjQpMQsljl" +
		"5nMYlWyH5p#FCTRoVfZ##t88HNJyaPP3wmH34QEQisa5b8xkYlFZ12j24$wAFCfPrivhIpr" +
		"YwYiubOEhHGL8ohgOHzWrdIxdemZvX1pRTlenzTaOh5bky6srNojfTnDR2AMqVw2c49zbOu" +
		"ta$f6RrzNZ9rQ7YBswJulKD#l$NyJOuaZDEPJxj2SbROq3Vh64yTfRDPz3clE2MqVzOnvW9" +
		"YezKc4bU$xn5Gwbb0swROvddvxYBc4Zcj6gBz8Y1vlNUB$QCRxpwDk1ip3MsmBQpuhZDbEw" +
		"#s3vixLzo1vALflffwgzHL4ZP#FsVHlq$4xQEunwcckd3iHwGJtXfdX#JzvHAOhta2NFe6n" +
		"1XCp4kUAsQwy7PsRSAjBtvliFoU8QthiDLhcS9pbMYzojM$GiiBJRzT9nj3xqsWYUX3hQMo" +
		"tfR50jorDqA#vfMsOBjttRT2tqAK7hZ$RibtwIq6yjeAnIWByll$st#9Z5lGZH#M8dA1ibi" +
		"DoIFw2vv63whr3VfJjyeDyBzjeVQTytwhtDmxpAzdCzzUE$IN1MYIV4vjaesoGHTJMooTyV" +
		"qmi9$ZDos9vHnR9EjNdK$bCoRNoeIoLTsM9l2UlqEQtAVFaLLaeRyeRia1nvgkMjuaFP9by" +
		"96jajQoIbR92jUvMxz#ikFAhx9Kzyhlox29#KThFygUJwm7k#MDAOxNZBTKwIwgeDVAK6SA" +
		"wNiiIKakxZhAESYZRunZ6kjx0ysSukQMqu#ZjWdMEn5716FMKzVHNAu2tB2C09kzV8Tx0Gh" +
		"plcGHu5qlbMMCIuAqiXVSoapSp2o6UwuP22VL2IWizcPi5wxplHNyDPIB4s1QZBDCefbrCM" +
		"Uv20SSfe2nI21CXhRiHKYVb2EOtYFnATNu28$y18i4jUm==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Accessibility = PUBLIC
			Action.NONE,  	// [1] Accessibility = 
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Imports = Imports Import; returns 'Import' although none is marked
			Action.NONE,  	// [5] Imports = 
			RETURN2,	// [6] Declarations = Declarations Declaration; returns 'Declaration' although none is marked
			Action.NONE,  	// [7] Declarations = 
			Action.RETURN,	// [8] Declaration = FunctionDeclaration
			Action.RETURN,	// [9] Declaration = FieldDeclaration
			Action.RETURN,	// [10] Declaration = TypeDeclaration
			RETURN9,	// [11] FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterLists RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [23] Parameter = TypeName ID; returns 'ID' although none is marked
			new Action() {	// [24] NonEmptyPlist = NonEmptyPlist COMMA Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [25] NonEmptyPlist = Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [26] ParameterLists = NonEmptyPlist
			Action.NONE,  	// [27] ParameterLists = 
			Action.RETURN,	// [28] Statement = LocalVardeclaration
			Action.RETURN,	// [29] Statement = BlockStatement
			Action.RETURN,	// [30] Statement = IfStatement
			Action.RETURN,	// [31] Statement = WhileStatement
			Action.RETURN,	// [32] Statement = BreakStatement
			Action.RETURN,	// [33] Statement = ReturnStatement
			RETURN2,	// [34] Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [35] LocalVardeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [36] BlockStatement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [37] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [38] StatementList = 
			RETURN6,	// [39] IfStatement = IF LPAREN Expression RPAREN Statement ElseTail; returns 'ElseTail' although none is marked
			RETURN2,	// [40] ElseTail = ELSE Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [41] ElseTail = 
			RETURN5,	// [42] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [43] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [44] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [45] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [46] Expression = Assignment
			Action.RETURN,	// [47] Expression = RHSExpression
			RETURN3,	// [48] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [49] LHSExpression = ID
			Action.RETURN,	// [50] LHSExpression = ArrayAccess
			RETURN4,	// [51] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [52] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [53] RHSExpression = ArithmeticExpression
			RETURN3,	// [54] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [55] ComparisonOperator = EQEQ
			Action.RETURN,	// [56] ComparisonOperator = NEQ
			Action.RETURN,	// [57] ComparisonOperator = LT
			Action.RETURN,	// [58] ComparisonOperator = LEQ
			Action.RETURN,	// [59] ComparisonOperator = GT
			Action.RETURN,	// [60] ComparisonOperator = GEQ
			new Action() {	// [61] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [62] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [63] AdditiveOperator = PLUS
			Action.RETURN,	// [64] AdditiveOperator = MINUS
			new Action() {	// [65] Term = Term MultOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [66] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [67] MultOperator = TIMES
			Action.RETURN,	// [68] MultOperator = DIV
			Action.RETURN,	// [69] MultOperator = MOD
			RETURN2,	// [70] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [71] Factor = PrimaryExpression
			Action.RETURN,	// [72] PrimaryExpression = LHSExpression
			RETURN4,	// [73] PrimaryExpression = ID LPAREN ExpressionList RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [74] PrimaryExpression = LBRACKET ExpressionListNonEmpty RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [75] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [76] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [77] PrimaryExpression = TRUE
			Action.RETURN,	// [78] PrimaryExpression = FALSE
			RETURN3,	// [79] PrimaryExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [80] ExpressionList = ExpressionListNonEmpty
			Action.NONE,  	// [81] ExpressionList = 
			RETURN2,	// [82] ExpressionListNonEmpty = ExpressionListHead Expression; returns 'Expression' although none is marked
			RETURN3,	// [83] ExpressionListHead = ExpressionListHead Expression COMMA; returns 'COMMA' although none is marked
			Action.NONE	// [84] ExpressionListHead = 
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
