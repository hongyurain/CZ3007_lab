// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
//%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */
Accessibility = PUBLIC
		  |
		  ;

Module = MODULE ID LCURLY Imports Declarations RCURLY;
Import = IMPORT ID SEMICOLON;
Imports = Imports Import
		  |
		  ;
Declarations = Declarations Declaration
		  |
		  ;
Declaration = FunctionDeclaration
		  |FieldDeclaration
		  |TypeDeclaration
		  ;
FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterLists RPAREN LCURLY StatementList RCURLY;

FieldDeclaration = Accessibility TypeName ID SEMICOLON;

TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

TypeName = PrimitiveType
		  |ArrayType
		  |ID
		  ;

PrimitiveType = VOID
		  |BOOLEAN
		  |INT
		  ;

ArrayType = PrimitiveType LBRACKET RBRACKET
		  |ArrayType LBRACKET RBRACKET
		  |ID LBRACKET RBRACKET
		  ;

Parameter = TypeName ID;

NonEmptyPlist = NonEmptyPlist COMMA Parameter
		  |Parameter
		  ;
ParameterLists = NonEmptyPlist
		  |
		  ;
		  
Statement = LocalVardeclaration 
          | BlockStatement
          | IfStatement
          | WhileStatement
          | BreakStatement
          | ReturnStatement
          | Expression SEMICOLON
          ;

LocalVardeclaration = TypeName ID SEMICOLON;
BlockStatement = LCURLY StatementList RCURLY;
StatementList = Statement StatementList
		  |
		  ;
IfStatement = IF LPAREN Expression RPAREN Statement ElseTail;
ElseTail = ELSE Statement
		  |
		  ;

WhileStatement = WHILE LPAREN Expression RPAREN Statement ;

BreakStatement = BREAK SEMICOLON ;

ReturnStatement = RETURN SEMICOLON
		  | RETURN Expression SEMICOLON
          ;

Expression = Assignment
		  |RHSExpression
		  ;

Assignment = LHSExpression EQL Expression ;

LHSExpression = ID
		  |ArrayAccess
		  ;

ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET
          | ID LBRACKET Expression RBRACKET
          ; // need expand to avoid shift-reduce conflict

RHSExpression = ArithmeticExpression
          | ArithmeticExpression ComparisonOperator ArithmeticExpression
          ;

ComparisonOperator = EQEQ
          | NEQ
          | LT
          | LEQ
          | GT
          | GEQ
          ;

ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
          | Term
          ;

AdditiveOperator = PLUS
          | MINUS
          ;

Term = Term MultOperator Factor
     	  | Factor
     	  ;

MultOperator = TIMES
          | DIV
          | MOD
          ;

Factor = MINUS Factor
       	  | PrimaryExpression
          ;

PrimaryExpression = LHSExpression
		  |ID LPAREN ExpressionList RPAREN
		  |LBRACKET ExpressionListNonEmpty RBRACKET
		  |STRING_LITERAL
		  |INT_LITERAL
		  |TRUE
		  |FALSE
		  |LPAREN Expression RPAREN
		  ;

ExpressionList = ExpressionListNonEmpty 
          | 
          ;
ExpressionListNonEmpty = ExpressionListHead Expression;
ExpressionListHead = ExpressionListHead Expression COMMA 
          |
          ;



/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. 	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;
*/